#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
pup: check PyPI for updates, since pip doesn't.
"""

from __future__ import print_function

import sys
import pip

try:
    import xmlrpclib
    from cStringIO import StringIO
    from itertools import ifilter as filter  # pylint: disable=W0622
except ImportError:
    from io import StringIO
    import xmlrpc.client as xmlrpclib  # pylint: disable=F0401

from distutils.version import StrictVersion, LooseVersion


def pip_freeze():
    """Run `pip freeze` and return a generator yielding [package, version]
    lists."""
    sys.stdout = _stdout = StringIO()
    sys.stderr = _stderr = StringIO()

    pip.main(['freeze'])

    sys.stdout = sys.__stdout__
    sys.stderr = sys.__stderr__

    return filter(
        lambda p: len(p) >= 2,
        (p.split('==') for p in _stdout.getvalue().split('\n'))
    )


def remote_version(package):
    """For a given package, query PyPI and return the newest version number.
    """
    url = 'http://pypi.python.org/pypi'
    pypi = xmlrpclib.ServerProxy(url, xmlrpclib.Transport())
    hits = pypi.package_releases(package)
    return hits[0] if hits else '0'


def is_newer(ver1, ver2):
    """Return `True` if `ver1` is newer than `ver2`, otherwise return `False`.
    """
    try:
        return StrictVersion(ver1) > StrictVersion(ver2)
    except ValueError:
        return LooseVersion(ver1) > LooseVersion(ver2)


def find_updates(packages):
    """Return a generator yielding (package, new_ver, old_ver) tuples."""
    for pkg, local_ver in packages:
        remote_ver = remote_version(pkg)
        if remote_ver and is_newer(remote_ver, local_ver):
            yield (pkg, remote_ver, local_ver)


def main():
    """Identify installed packages with newer versions available and print the
    result.
    """
    packages = pip_freeze()
    updates = find_updates(packages)
    columns = '\t{:20}    {:15}    {:15}'

    print('pup: checking PyPI for updates.\n')

    cnt = 0
    for pkg, new, old in updates:
        cnt += 1
        if cnt == 1:
            print('Packages with newer versions available:\n')
            print(columns.format('Package', 'Available', 'Current'))
            print(columns.format('-' * 20, '-' * 15, '-' * 15))

        print(columns.format(pkg[:20], new[:15], old[:15]))

    print('\nFound {0} update(s).'.format(cnt))


if __name__ == '__main__':
    main()
